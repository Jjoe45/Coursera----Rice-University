# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 1
game_status = True

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        


class Hand:
    def __init__(self):
        self.hand = [] # list containing cards in current hand
        self.value = 0
    def __str__(self):
        message = "current hand is "
        for value in self.hand: # for loop to generate message
            message += Card.get_suit(value) + Card.get_rank(value) + " "
        return message
    def add_card(self, card):
        
        self.hand.append(card) #appending card to hand

    def get_value(self):
            self.value = 0
            for card in self.hand:
                if Card.get_rank(card) != 'A':
                    self.value += VALUES[Card.get_rank(card)]
                elif Card.get_rank(card) == 'A':
                    if self.value <= 10:
                        self.value += 11
                    else:
                        self.value += 1 
            if self.value >= 22:
                self.value = 0 
                for card in self.hand:
                    if Card.get_rank(card) != 'A':
                        self.value += VALUES[Card.get_rank(card)]
                    elif Card.get_rank(card) == 'A':
                        self.value += 1  
            return self.value
        
    def draw(self, canvas, pos):
           
            for item in self.hand:
                item = Card(Card.get_suit(item), Card.get_rank(item))
                item.draw(canvas, pos)
                pos[0] += 100                   
        
# define deck class 
class Deck:
    def __init__(self):
        self.count = 0
        self.deck = []
        for item in SUITS: #generating desk with two for loops
            for rank in RANKS:
                self.deck.append((rank, item))
    def shuffle(self):
        random.shuffle(self.deck) # shuffling deck
        

    def deal_card(self):
        card = Card(self.deck[self.count][1], self.deck[self.count][0]) # using this count method so shuffle 
        # doesnt mess anything up and don't have to remove any cards from deck
        self.count +=1
        return card
    
    def __str__(self):
        message = ""
        for pair in self.deck:
            message += str(pair[1]) + str(pair[0]) + " "
        return message



#define event handlers for buttons
def deal():
    global outcome, in_play, dealers_hand, players_hand,deck, game_status, score
    in_play = False
    if game_status == True:
        score -= 1
    dealers_hand = Hand()
    players_hand = Hand()
    deck = Deck()
    deck.shuffle()
    c1 = deck.deal_card() #Card 1 player
    c2 = deck.deal_card() #Card 2 dealer
    c3 = deck.deal_card() #Card 3 player
    c4 = deck.deal_card() #Card 4 dealer
    players_hand.add_card(c1)
    players_hand.add_card(c3)
    dealers_hand.add_card(c2)
    dealers_hand.add_card(c4)
    outcome =  ("You have " + str(players_hand.get_value())) +". Hit or Stand?"
    game_status = True
 
def hit():
    global players_hand, game_status, outcome, score, deck
    if players_hand.get_value() <= 21 and game_status == True:
        c5 = deck.deal_card()
        players_hand.add_card(c5)
        if players_hand.get_value() > 21:
            outcome = "You have busted! Press Deal to play again."
            game_status = False
            score += -1
        elif game_status == True:
            outcome = "You have " + str(players_hand.get_value()) + ". Hit or Stand?"
    else:
        outcome = "Game over, press Deal to play again."
        
def stand():

    global dealers_hand, deck, players_hand, game_status, outcome, in_play, score
    in_play = True
    if players_hand.get_value() > 21:
        print "You have busted."

    while dealers_hand.get_value() < 17 and game_status == True:
            c6 = deck.deal_card()
            dealers_hand.add_card(c6)
    if dealers_hand.get_value() > 21 and game_status == True:
            outcome = "Dealer busts, you win! Press Deal to play again"
            game_status = False
            score += 1
    elif dealers_hand.get_value() >= players_hand.get_value() and game_status == True:
            outcome = "Dealer has " + str(dealers_hand.get_value()) + ", you have " + str(players_hand.get_value()) + ", dealer wins. Press Deal to play again." 
            game_status = False
            score -= 1
    elif dealers_hand.get_value() < players_hand.get_value() and game_status == True:
            outcome = "Dealer has " + str(dealers_hand.get_value()) + ", you have " + str(players_hand.get_value()) + ", you win! Press Deal to play again."
            game_status = False
            score += 1

def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    global players_hand, card_back, CARD_BACK_SIZE, CARD_BACK_CENTER
    players_hand.draw(canvas, [50, 400])
    dealers_hand.draw(canvas, [50, 100])
    canvas.draw_text(outcome, (25, 570), 20, "black")
    canvas.draw_text(("Score = " + str(score)), (500, 25), 20, "black")
    canvas.draw_text("Blackjack", (250,50), 36, "black")
    if in_play == False:
        canvas.draw_image(card_back, (36, 48), (72, 96), (86, 148), (72,96))
    
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
