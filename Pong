# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [300, 200]
ball_vel = [0,0]
paddle1_pos = 160
paddle2_pos = 160
paddle1_vel = 0
paddle2_vel = 0
score_left = 0
score_right = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [300, 200]
    if direction == True:
        ball_vel[0] = -random.randrange(2, 5)
        print ball_vel[0]
        ball_vel[1] = -random.randrange(1,4)
        print ball_vel[1]
    if direction == False:
        ball_vel[0] = random.randrange(2, 5)
        print ball_vel[0]
        ball_vel[1] = -random.randrange(1,4)
        print ball_vel[1]
    
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score_left, score_right  # these are ints
    paddle1_pos = 160
    paddle2_pos = 160
    score_left = 0
    score_right = 0
    paddle1_vel = 0
    paddle2_vel = 0
    spawn_ball(random.choice([LEFT, RIGHT]))

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel, score_left, score_right
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update if ball hits the top of bottom of screen
    ball_pos[0] = ball_pos[0] + ball_vel[0]
    ball_pos[1] = ball_pos[1] + ball_vel[1]
    if ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = -(ball_vel[1])
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = -(ball_vel[1])
    # determining if ball resets or colides with paddle
    if ball_pos[0] <= PAD_WIDTH + BALL_RADIUS:
        if ball_pos[1] in range(paddle1_pos, (paddle1_pos + PAD_HEIGHT + 1)):
            ball_vel[0] = -(ball_vel[0] * 1.1)
        else:
            spawn_ball(LEFT)
            score_right += 1
    if ball_pos[0] >= WIDTH - PAD_WIDTH- BALL_RADIUS:
        if ball_pos[1] in range(paddle2_pos, (paddle2_pos + PAD_HEIGHT +1)):
            ball_vel[0] = -(ball_vel[0] * 1.1)
        else:
            spawn_ball(RIGHT)
            score_left += 1
        
    # draw ball
    canvas.draw_circle((ball_pos[0], ball_pos[1]), BALL_RADIUS,
                       12, "white", "white")
    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos = paddle1_pos + paddle1_vel
    paddle2_pos = paddle2_pos + paddle2_vel
    if paddle1_pos == 0:
        paddle1_vel = 0
    if paddle2_pos == 0:
        paddle2_vel = 0
    if paddle1_pos == HEIGHT - PAD_HEIGHT:
        paddle1_vel = 0
    if paddle2_pos == HEIGHT - PAD_HEIGHT:
        paddle2_vel = 0    
    
    # draw paddles
    canvas.draw_line((HALF_PAD_WIDTH, paddle1_pos), (HALF_PAD_WIDTH, (paddle1_pos + PAD_HEIGHT)), PAD_WIDTH, "white")
    canvas.draw_line((WIDTH - HALF_PAD_WIDTH, paddle2_pos), (WIDTH - HALF_PAD_WIDTH, 
                     paddle2_pos + PAD_HEIGHT), PAD_WIDTH, "white")                    
    
    # draw scores
    canvas.draw_text(str(score_left), (250, 30), 36, "red")
    canvas.draw_text(str(score_right), (330, 30), 36, "red") 
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel = 2
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel = -2
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel = 2
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = -2
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel = 0
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel = 0
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = 0
        
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
reset_button = frame.add_button("Restart", new_game)


# start frame
new_game()
frame.start()
